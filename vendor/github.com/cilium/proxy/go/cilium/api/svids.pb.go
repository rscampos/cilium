// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: cilium/api/svids.proto

package cilium

import (
	context "context"
	_ "github.com/cilium/proxy/go/envoy/annotations"
	v3 "github.com/cilium/proxy/go/envoy/service/discovery/v3"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The mapping of an endpoint identity to SVIDs.
type SVIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Endpoint's identity.
	Identity uint64 `protobuf:"varint,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// Set of SVIDs assocaited to that identity
	Svids []*X509SVID `protobuf:"bytes,2,rep,name=svids,proto3" json:"svids,omitempty"`
}

func (x *SVIDs) Reset() {
	*x = SVIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cilium_api_svids_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SVIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVIDs) ProtoMessage() {}

func (x *SVIDs) ProtoReflect() protoreflect.Message {
	mi := &file_cilium_api_svids_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVIDs.ProtoReflect.Descriptor instead.
func (*SVIDs) Descriptor() ([]byte, []int) {
	return file_cilium_api_svids_proto_rawDescGZIP(), []int{0}
}

func (x *SVIDs) GetIdentity() uint64 {
	if x != nil {
		return x.Identity
	}
	return 0
}

func (x *SVIDs) GetSvids() []*X509SVID {
	if x != nil {
		return x.Svids
	}
	return nil
}

// The X509SVID message carries a single SVID including its cert and key.
type X509SVID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The SPIFFE ID of the SVID in this entry
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// ASN.1 DER encoded certificate chain. MAY include intermediates,
	// the leaf certificate (or SVID itself) MUST come first.
	Cert []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	// ASN.1 DER encoded PKCS#8 private key. MUST be unencrypted.
	Key []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *X509SVID) Reset() {
	*x = X509SVID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cilium_api_svids_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509SVID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509SVID) ProtoMessage() {}

func (x *X509SVID) ProtoReflect() protoreflect.Message {
	mi := &file_cilium_api_svids_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509SVID.ProtoReflect.Descriptor instead.
func (*X509SVID) Descriptor() ([]byte, []int) {
	return file_cilium_api_svids_proto_rawDescGZIP(), []int{1}
}

func (x *X509SVID) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *X509SVID) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *X509SVID) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

var File_cilium_api_svids_proto protoreflect.FileDescriptor

var file_cilium_api_svids_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x76, 0x69,
	0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d,
	0x1a, 0x2a, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x33, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x05,
	0x53, 0x56, 0x49, 0x44, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x76, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56,
	0x49, 0x44, 0x52, 0x05, 0x73, 0x76, 0x69, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x08, 0x58, 0x35, 0x30,
	0x39, 0x53, 0x56, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x32, 0xaa, 0x02, 0x0a, 0x14, 0x53, 0x56, 0x49,
	0x44, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x70, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x56, 0x49, 0x44, 0x73,
	0x12, 0x2c, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x56, 0x49,
	0x44, 0x73, 0x12, 0x2c, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x33, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x3a, 0x73, 0x76, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x1a,
	0x14, 0x8a, 0xa4, 0x96, 0xf3, 0x07, 0x0e, 0x0a, 0x0c, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x53, 0x56, 0x49, 0x44, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cilium_api_svids_proto_rawDescOnce sync.Once
	file_cilium_api_svids_proto_rawDescData = file_cilium_api_svids_proto_rawDesc
)

func file_cilium_api_svids_proto_rawDescGZIP() []byte {
	file_cilium_api_svids_proto_rawDescOnce.Do(func() {
		file_cilium_api_svids_proto_rawDescData = protoimpl.X.CompressGZIP(file_cilium_api_svids_proto_rawDescData)
	})
	return file_cilium_api_svids_proto_rawDescData
}

var file_cilium_api_svids_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cilium_api_svids_proto_goTypes = []interface{}{
	(*SVIDs)(nil),                // 0: cilium.SVIDs
	(*X509SVID)(nil),             // 1: cilium.X509SVID
	(*v3.DiscoveryRequest)(nil),  // 2: envoy.service.discovery.v3.DiscoveryRequest
	(*v3.DiscoveryResponse)(nil), // 3: envoy.service.discovery.v3.DiscoveryResponse
}
var file_cilium_api_svids_proto_depIdxs = []int32{
	1, // 0: cilium.SVIDs.svids:type_name -> cilium.X509SVID
	2, // 1: cilium.SVIDDiscoveryService.StreamSVIDs:input_type -> envoy.service.discovery.v3.DiscoveryRequest
	2, // 2: cilium.SVIDDiscoveryService.FetchSVIDs:input_type -> envoy.service.discovery.v3.DiscoveryRequest
	3, // 3: cilium.SVIDDiscoveryService.StreamSVIDs:output_type -> envoy.service.discovery.v3.DiscoveryResponse
	3, // 4: cilium.SVIDDiscoveryService.FetchSVIDs:output_type -> envoy.service.discovery.v3.DiscoveryResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_cilium_api_svids_proto_init() }
func file_cilium_api_svids_proto_init() {
	if File_cilium_api_svids_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cilium_api_svids_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SVIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cilium_api_svids_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509SVID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cilium_api_svids_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cilium_api_svids_proto_goTypes,
		DependencyIndexes: file_cilium_api_svids_proto_depIdxs,
		MessageInfos:      file_cilium_api_svids_proto_msgTypes,
	}.Build()
	File_cilium_api_svids_proto = out.File
	file_cilium_api_svids_proto_rawDesc = nil
	file_cilium_api_svids_proto_goTypes = nil
	file_cilium_api_svids_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SVIDDiscoveryServiceClient is the client API for SVIDDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SVIDDiscoveryServiceClient interface {
	StreamSVIDs(ctx context.Context, opts ...grpc.CallOption) (SVIDDiscoveryService_StreamSVIDsClient, error)
	FetchSVIDs(ctx context.Context, in *v3.DiscoveryRequest, opts ...grpc.CallOption) (*v3.DiscoveryResponse, error)
}

type sVIDDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSVIDDiscoveryServiceClient(cc grpc.ClientConnInterface) SVIDDiscoveryServiceClient {
	return &sVIDDiscoveryServiceClient{cc}
}

func (c *sVIDDiscoveryServiceClient) StreamSVIDs(ctx context.Context, opts ...grpc.CallOption) (SVIDDiscoveryService_StreamSVIDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SVIDDiscoveryService_serviceDesc.Streams[0], "/cilium.SVIDDiscoveryService/StreamSVIDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &sVIDDiscoveryServiceStreamSVIDsClient{stream}
	return x, nil
}

type SVIDDiscoveryService_StreamSVIDsClient interface {
	Send(*v3.DiscoveryRequest) error
	Recv() (*v3.DiscoveryResponse, error)
	grpc.ClientStream
}

type sVIDDiscoveryServiceStreamSVIDsClient struct {
	grpc.ClientStream
}

func (x *sVIDDiscoveryServiceStreamSVIDsClient) Send(m *v3.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sVIDDiscoveryServiceStreamSVIDsClient) Recv() (*v3.DiscoveryResponse, error) {
	m := new(v3.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sVIDDiscoveryServiceClient) FetchSVIDs(ctx context.Context, in *v3.DiscoveryRequest, opts ...grpc.CallOption) (*v3.DiscoveryResponse, error) {
	out := new(v3.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/cilium.SVIDDiscoveryService/FetchSVIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SVIDDiscoveryServiceServer is the server API for SVIDDiscoveryService service.
type SVIDDiscoveryServiceServer interface {
	StreamSVIDs(SVIDDiscoveryService_StreamSVIDsServer) error
	FetchSVIDs(context.Context, *v3.DiscoveryRequest) (*v3.DiscoveryResponse, error)
}

// UnimplementedSVIDDiscoveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSVIDDiscoveryServiceServer struct {
}

func (*UnimplementedSVIDDiscoveryServiceServer) StreamSVIDs(SVIDDiscoveryService_StreamSVIDsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSVIDs not implemented")
}
func (*UnimplementedSVIDDiscoveryServiceServer) FetchSVIDs(context.Context, *v3.DiscoveryRequest) (*v3.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSVIDs not implemented")
}

func RegisterSVIDDiscoveryServiceServer(s *grpc.Server, srv SVIDDiscoveryServiceServer) {
	s.RegisterService(&_SVIDDiscoveryService_serviceDesc, srv)
}

func _SVIDDiscoveryService_StreamSVIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SVIDDiscoveryServiceServer).StreamSVIDs(&sVIDDiscoveryServiceStreamSVIDsServer{stream})
}

type SVIDDiscoveryService_StreamSVIDsServer interface {
	Send(*v3.DiscoveryResponse) error
	Recv() (*v3.DiscoveryRequest, error)
	grpc.ServerStream
}

type sVIDDiscoveryServiceStreamSVIDsServer struct {
	grpc.ServerStream
}

func (x *sVIDDiscoveryServiceStreamSVIDsServer) Send(m *v3.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sVIDDiscoveryServiceStreamSVIDsServer) Recv() (*v3.DiscoveryRequest, error) {
	m := new(v3.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SVIDDiscoveryService_FetchSVIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDDiscoveryServiceServer).FetchSVIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cilium.SVIDDiscoveryService/FetchSVIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDDiscoveryServiceServer).FetchSVIDs(ctx, req.(*v3.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SVIDDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cilium.SVIDDiscoveryService",
	HandlerType: (*SVIDDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchSVIDs",
			Handler:    _SVIDDiscoveryService_FetchSVIDs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSVIDs",
			Handler:       _SVIDDiscoveryService_StreamSVIDs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cilium/api/svids.proto",
}
